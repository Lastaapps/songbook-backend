package cz.lastaapps.app

import io.ktor.client.*
import io.ktor.client.plugins.cookies.*
import io.ktor.client.plugins.logging.*
import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.client.statement.*
import io.ktor.http.*
import kotlinx.coroutines.runBlocking

fun main(args: Array<String>): Unit = runBlocking {
    val client = HttpClient() {
        followRedirects = false
        install(HttpCookies)
        Logging { level = LogLevel.ALL }
//        install(ContentNegotiation)
    }
//    client.plugin(HttpSend).intercept { request ->
//        val call = execute(request)
//        when (val body = request.body) {
//            is FormDataContent -> body.formData.forEach { name, list -> println("$name: $list") }
//            is TextContent -> println(body.text)
//            else -> println(request.body)
//        }
//        call
//    }

    val agataLocation = client.get("https://agata.suz.cvut.cz/secure/index.php")
        .apply { log() }
        .also { require(it.status.value == 302) }
        .let { it.headers[HttpHeaders.Location]!! }

    val agataReturn = agataLocation.split("?")[1].parseUrlEncodedParameters().let { it["return"]!! }

    val ctuRedirect = client.get("https://agata.suz.cvut.cz/Shibboleth.sso/Login") {
        agataReturn.split("?")[1].parseUrlEncodedParameters().forEach { name, list ->
            parameter(name, list.first())
        }
        parameter("entityID", "https://idp2.civ.cvut.cz/idp/shibboleth")
    }.apply { log() }
        .also { require(it.status.value == 302) }
        .let { it.headers[HttpHeaders.Location] }!!


    val ctuFinalUrl = client.get(ctuRedirect)
        .apply { log() }
        .also { require(it.status.value == 302) }
        .let { response -> "https://idp2.civ.cvut.cz" + response.headers[HttpHeaders.Location]!! }

    client.head(ctuFinalUrl).apply { log() }
        .also { require(it.status.value == 200) }

    client.submitForm(ctuFinalUrl, formParameters = Parameters.build {
        append("j_username", args[0])
        append("j_password", args[1])
    }).apply { log() }.also { require(it.status.value == 200) }

    client.submitForm(
        "https://agata.suz.cvut.cz/Shibboleth.sso/SAML2/POST",
        formParameters = Parameters.build {
            val relayState = agataReturn.parseUrlEncodedParameters()["target"]!!
            append("RelayState", relayState)
            append("SAMLResponse", scheme)
        }) {
    }.apply { log() }
        .also { require(it.status.value == 302) }
        .setCookie().first { it.name.startsWith("_shibsession_") }

    val agataResponse = client.get("https://agata.suz.cvut.cz/secure/index.php").apply { log() }
        .also { require(it.status.value == 200) }
}

private const val scheme =
    """"""

private fun HttpResponse.log() {
    println("Url: ${this.request.url}")
    println("Code: ${this.status.value}, Method: ${this.request.method}")
    println("Request Headers:  ${this.request.headers}")
    println("Response Headers: ${this.headers}")
    println("Response Cookies: ${this.setCookie()}")
}
